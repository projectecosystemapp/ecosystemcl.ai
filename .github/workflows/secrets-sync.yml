name: Secrets Management

on:
  workflow_dispatch:
  schedule:
    - cron: '0 */6 * * *' # Every 6 hours

permissions:
  id-token: write
  contents: read
  secrets: write

env:
  AWS_REGION: us-west-2
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

jobs:
  sync-secrets:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/ecosystemcl-github-actions
          aws-region: ${{ env.AWS_REGION }}

      - name: Fetch Secrets from AWS Systems Manager
        id: fetch-secrets
        run: |
          # Define parameters to sync
          PARAMETERS=(
            "/ecosystemcl/whop/api_key"
            "/ecosystemcl/cognito/user_pool_id"
            "/ecosystemcl/cognito/client_id"
            "/ecosystemcl/amplify/app_id"
            "/ecosystemcl/dynamodb/pattern_table"
            "/ecosystemcl/dynamodb/workspace_table"
            "/ecosystemcl/opensearch/endpoint"
            "/ecosystemcl/redis/endpoint"
            "/ecosystemcl/bedrock/region"
            "/ecosystemcl/s3/artifacts_bucket"
            "/ecosystemcl/sqs/task_queue_url"
            "/ecosystemcl/ecr/repository_uri"
          )

          # Fetch all parameters
          for param in "${PARAMETERS[@]}"; do
            echo "Fetching $param..."
            
            # Extract parameter name for GitHub secret
            SECRET_NAME=$(echo $param | cut -d'/' -f3- | tr '/' '_' | tr '[:lower:]' '[:upper:]')
            
            # Get parameter value from SSM
            VALUE=$(aws ssm get-parameter \
              --name "$param" \
              --with-decryption \
              --query 'Parameter.Value' \
              --output text 2>/dev/null || echo "")
            
            if [ -n "$VALUE" ]; then
              echo "::add-mask::$VALUE"
              echo "${SECRET_NAME}=${VALUE}" >> $GITHUB_OUTPUT
              echo "✅ Retrieved $param"
            else
              echo "⚠️ Parameter $param not found in SSM"
            fi
          done

      - name: Update GitHub Secrets
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const sodium = require('tweetsodium');
            
            // Get repository public key
            const { data: publicKey } = await github.rest.actions.getRepoPublicKey({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            
            // Secrets to update
            const secrets = {
              WHOP_SECRET_API_KEY: process.env.WHOP_API_KEY,
              COGNITO_USER_POOL_ID: process.env.COGNITO_USER_POOL_ID,
              COGNITO_CLIENT_ID: process.env.COGNITO_CLIENT_ID,
              AMPLIFY_APP_ID: process.env.AMPLIFY_APP_ID,
              HELIX_TABLE_NAME: process.env.DYNAMODB_PATTERN_TABLE,
              WORKSPACE_TABLE_NAME: process.env.DYNAMODB_WORKSPACE_TABLE,
              OPENSEARCH_ENDPOINT: process.env.OPENSEARCH_ENDPOINT,
              REDIS_ENDPOINT: process.env.REDIS_ENDPOINT,
              BEDROCK_REGION: process.env.BEDROCK_REGION,
              ARTIFACTS_BUCKET: process.env.S3_ARTIFACTS_BUCKET,
              TASK_QUEUE_URL: process.env.SQS_TASK_QUEUE_URL,
              ECR_REPOSITORY_URI: process.env.ECR_REPOSITORY_URI
            };
            
            // Update each secret
            for (const [name, value] of Object.entries(secrets)) {
              if (value) {
                const messageBytes = Buffer.from(value);
                const keyBytes = Buffer.from(publicKey.key, 'base64');
                const encryptedBytes = sodium.seal(messageBytes, keyBytes);
                const encryptedValue = Buffer.from(encryptedBytes).toString('base64');
                
                await github.rest.actions.createOrUpdateRepoSecret({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  secret_name: name,
                  encrypted_value: encryptedValue,
                  key_id: publicKey.key_id
                });
                
                console.log(`✅ Updated secret: ${name}`);
              }
            }

      - name: Create SSM Parameters (if missing)
        run: |
          # List of required parameters with default values
          cat > parameters.json <<EOF
          {
            "/ecosystemcl/github/repo": "projectecosystemapp/ecosystemcl.ai",
            "/ecosystemcl/github/branch": "main",
            "/ecosystemcl/environment": "production",
            "/ecosystemcl/region": "us-west-2"
          }
          EOF

          # Create parameters if they don't exist
          jq -r 'to_entries[] | "\(.key) \(.value)"' parameters.json | while read name value; do
            aws ssm put-parameter \
              --name "$name" \
              --value "$value" \
              --type "String" \
              --overwrite || true
          done
