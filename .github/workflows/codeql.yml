name: CodeQL Security Analysis

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 9 * * 1'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  analyze:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    strategy:
      fail-fast: false
      matrix:
        language: ['javascript-typescript']

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: +security-extended,security-and-quality
          config: |
            paths-ignore:
              - node_modules
              - .next
              - .amplify
              - build
              - dist

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        id: analyze
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{ matrix.language }}"
          output: results
          upload: false
          add-snippet-paths: true

      - name: Filter Results
        run: |
          # Filter out false positives and noise
          if [ -f results/javascript.sarif ]; then
            jq '.runs[0].results |= map(select(.ruleId | test("js/unused-local-variable|js/dead-store") | not))' \
              results/javascript.sarif > results/filtered.sarif
          else
            echo '{"version":"2.1.0","runs":[]}' > results/filtered.sarif
          fi

      - name: Upload SARIF Results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results/filtered.sarif
          category: "/language:${{ matrix.language }}"
        continue-on-error: true

      - name: Generate Security Report
        if: github.event_name == 'pull_request'
        run: |
          if [ -f results/filtered.sarif ]; then
            CRITICAL=$(jq '[.runs[0].results[] | select(.level == "error")] | length' results/filtered.sarif)
            HIGH=$(jq '[.runs[0].results[] | select(.level == "warning" and .properties.security_severity >= 7)] | length' results/filtered.sarif)
            
            if [ "$CRITICAL" -gt 0 ] || [ "$HIGH" -gt 0 ]; then
              echo "ðŸš¨ Security Issues Found: $CRITICAL critical, $HIGH high severity"
              echo "Review required before merge"
              exit 1
            fi
          fi
