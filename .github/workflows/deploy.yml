name: Deploy ECOSYSTEMCL.AI

on:
  push:
    branches: [main]
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - development
          - staging
          - production

permissions:
  id-token: write
  contents: read
  actions: read
  security-events: write
  pull-requests: write

env:
  AWS_REGION: us-west-2
  NODE_VERSION: '20'
  PNPM_VERSION: '8.14.0'

jobs:
  # ==========================================
  # STAGE 1: Pre-flight Checks
  # ==========================================
  preflight:
    name: Pre-flight Validation
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.check.outputs.should_deploy }}
      environment: ${{ steps.check.outputs.environment }}
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine Deployment Status
        id: check
        run: |
          if [[ "${{ github.event_name }}" == "push" ]] && [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "environment=production" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "environment=${{ inputs.environment }}" >> $GITHUB_OUTPUT
          else
            echo "should_deploy=false" >> $GITHUB_OUTPUT
            echo "environment=development" >> $GITHUB_OUTPUT
          fi

  # ==========================================
  # STAGE 2: Build & Test
  # ==========================================
  build-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: preflight
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/ecosystemcl-github-actions
          aws-region: ${{ env.AWS_REGION }}

      - name: Install Dependencies
        run: |
          pnpm install --frozen-lockfile
          pnpm ls --depth=0

      - name: Run Type Checking
        run: pnpm type-check

      - name: Run Linting
        run: pnpm lint

      - name: Run Unit Tests
        run: |
          pnpm test:coverage
          echo "Test coverage report generated"

      - name: Build All Packages
        run: |
          pnpm build
          echo "Build artifacts created successfully"

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            packages/*/dist
            packages/web/.next
            packages/worker/build
          retention-days: 7

      - name: Upload Test Coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            packages/*/coverage
          retention-days: 30

  # ==========================================
  # STAGE 3: Infrastructure Validation
  # ==========================================
  validate-infrastructure:
    name: Validate CDK Infrastructure
    runs-on: ubuntu-latest
    needs: build-test
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/ecosystemcl-github-actions
          aws-region: ${{ env.AWS_REGION }}

      - name: Install CDK Dependencies
        working-directory: packages/infra
        run: |
          npm ci
          npm install -g aws-cdk@latest

      - name: CDK Synthesize
        working-directory: packages/infra
        run: |
          export COGNITO_USER_POOL_ID=${{ secrets.COGNITO_USER_POOL_ID }}
          export OPENSEARCH_ENDPOINT=${{ secrets.OPENSEARCH_ENDPOINT }}
          export REDIS_ENDPOINT=${{ secrets.REDIS_ENDPOINT }}
          
          cdk synth --all --verbose
          echo "✅ CDK synthesis successful"

      - name: CDK Diff
        working-directory: packages/infra
        run: |
          export COGNITO_USER_POOL_ID=${{ secrets.COGNITO_USER_POOL_ID }}
          
          cdk diff --all || true
          echo "Infrastructure changes reviewed"

      - name: Security Scan with Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: packages/infra/cdk.out
          framework: cloudformation
          output_format: sarif
          output_file_path: infrastructure-security.sarif
        continue-on-error: true

      - name: Upload Infrastructure Security Results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: infrastructure-security.sarif
          category: infrastructure-security

  # ==========================================
  # STAGE 4: Container Build & Push
  # ==========================================
  build-containers:
    name: Build Docker Containers
    runs-on: ubuntu-latest
    needs: validate-infrastructure
    if: needs.preflight.outputs.should_deploy == 'true'
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/ecosystemcl-github-actions
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Push Worker Container
        uses: docker/build-push-action@v5
        with:
          context: packages/worker
          push: true
          tags: |
            ${{ steps.ecr-login.outputs.registry }}/ecosystemcl-worker:${{ github.sha }}
            ${{ steps.ecr-login.outputs.registry }}/ecosystemcl-worker:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/arm64,linux/amd64

      - name: Scan Container Image
        run: |
          aws ecr start-image-scan \
            --repository-name ecosystemcl-worker \
            --image-id imageTag=${{ github.sha }}
          
          # Wait for scan to complete
          sleep 30
          
          # Get scan results
          aws ecr describe-image-scan-findings \
            --repository-name ecosystemcl-worker \
            --image-id imageTag=${{ github.sha }} \
            --output json > scan-results.json
          
          # Check for critical vulnerabilities
          CRITICAL=$(jq '.imageScanFindings.findingSeverityCounts.CRITICAL // 0' scan-results.json)
          if [ "$CRITICAL" -gt 0 ]; then
            echo "🚨 Critical vulnerabilities found in container image"
            exit 1
          fi

  # ==========================================
  # STAGE 5: Deploy Infrastructure
  # ==========================================
  deploy-infrastructure:
    name: Deploy CDK Stack
    runs-on: ubuntu-latest
    needs: [build-containers, validate-infrastructure]
    if: needs.preflight.outputs.should_deploy == 'true'
    environment:
      name: ${{ needs.preflight.outputs.environment }}
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/ecosystemcl-github-actions
          aws-region: ${{ env.AWS_REGION }}

      - name: Install CDK
        working-directory: packages/infra
        run: |
          npm ci
          npm install -g aws-cdk@latest

      - name: Deploy Infrastructure
        working-directory: packages/infra
        run: |
          export COGNITO_USER_POOL_ID=${{ secrets.COGNITO_USER_POOL_ID }}
          export OPENSEARCH_ENDPOINT=${{ secrets.OPENSEARCH_ENDPOINT }}
          export REDIS_ENDPOINT=${{ secrets.REDIS_ENDPOINT }}
          export CONTAINER_IMAGE_TAG=${{ github.sha }}
          
          # Deploy all stacks
          cdk deploy --all \
            --require-approval never \
            --outputs-file outputs.json
          
          # Extract outputs for next steps
          cat outputs.json

      - name: Enable DynamoDB Streams
        run: |
          # Enable streams on HelixPatternEntries table
          aws dynamodb update-table \
            --table-name HelixPatternEntries \
            --stream-specification StreamEnabled=true,StreamViewType=NEW_AND_OLD_IMAGES \
            || echo "Streams already enabled"

      - name: Configure Lambda Event Sources
        run: |
          # Get stream ARN
          STREAM_ARN=$(aws dynamodb describe-table \
            --table-name HelixPatternEntries \
            --query 'Table.StreamSpecification.StreamArn' \
            --output text)
          
          # Create event source mapping
          aws lambda create-event-source-mapping \
            --function-name ecosystemcl-cdc-processor \
            --event-source-arn "$STREAM_ARN" \
            --starting-position TRIM_HORIZON \
            --batch-size 50 \
            || echo "Event source mapping already exists"

  # ==========================================
  # STAGE 6: Deploy Application
  # ==========================================
  deploy-application:
    name: Deploy to Amplify
    runs-on: ubuntu-latest
    needs: deploy-infrastructure
    if: needs.preflight.outputs.should_deploy == 'true'
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/ecosystemcl-github-actions
          aws-region: ${{ env.AWS_REGION }}

      - name: Trigger Amplify Deployment
        run: |
          # Start deployment
          JOB_ID=$(aws amplify start-deployment \
            --app-id ${{ secrets.AMPLIFY_APP_ID }} \
            --branch-name main \
            --query 'jobSummary.jobId' \
            --output text)
          
          echo "Deployment started: Job ID $JOB_ID"
          
          # Wait for deployment to complete
          while true; do
            STATUS=$(aws amplify get-job \
              --app-id ${{ secrets.AMPLIFY_APP_ID }} \
              --branch-name main \
              --job-id "$JOB_ID" \
              --query 'job.summary.status' \
              --output text)
            
            echo "Deployment status: $STATUS"
            
            if [[ "$STATUS" == "SUCCEED" ]]; then
              echo "✅ Deployment successful"
              break
            elif [[ "$STATUS" == "FAILED" ]] || [[ "$STATUS" == "CANCELLED" ]]; then
              echo "❌ Deployment failed with status: $STATUS"
              exit 1
            fi
            
            sleep 30
          done

  # ==========================================
  # STAGE 7: Integration Tests
  # ==========================================
  integration-tests:
    name: Run Integration Tests
    runs-on: ubuntu-latest
    needs: deploy-application
    if: needs.preflight.outputs.should_deploy == 'true'
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/ecosystemcl-github-actions
          aws-region: ${{ env.AWS_REGION }}

      - name: Run API Tests
        run: |
          # Get API endpoint
          API_ENDPOINT=$(aws amplify get-app \
            --app-id ${{ secrets.AMPLIFY_APP_ID }} \
            --query 'app.defaultDomain' \
            --output text)
          
          # Test health endpoints
          curl -f "https://${API_ENDPOINT}/api/health" || exit 1
          curl -f "https://${API_ENDPOINT}/api/helix/health" || exit 1
          
          echo "✅ API health checks passed"

      - name: Test Whop Integration
        if: env.WHOP_SECRET_API_KEY != ''
        run: |
          # Verify products were provisioned
          ./scripts/verify-whop-products.sh
          echo "✅ Whop products verified"

      - name: Test Authentication Flow
        run: |
          # Test Cognito authentication
          npm run test:auth
          echo "✅ Authentication tests passed"

  # ==========================================
  # STAGE 8: Post-Deployment Validation
  # ==========================================
  post-deploy-validation:
    name: Post-Deployment Validation
    runs-on: ubuntu-latest
    needs: integration-tests
    if: always() && needs.preflight.outputs.should_deploy == 'true'
    
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/ecosystemcl-github-actions
          aws-region: ${{ env.AWS_REGION }}

      - name: Check CloudWatch Alarms
        run: |
          # Check for any alarms in ALARM state
          ALARMS=$(aws cloudwatch describe-alarms \
            --state-value ALARM \
            --query 'MetricAlarms[].AlarmName' \
            --output json)
          
          if [ "$ALARMS" != "[]" ]; then
            echo "⚠️ Active CloudWatch alarms detected: $ALARMS"
          else
            echo "✅ No active alarms"
          fi

      - name: Validate OpenSearch
        run: |
          # Check OpenSearch cluster health
          curl -s "https://${{ secrets.OPENSEARCH_ENDPOINT }}/_cluster/health" | jq '.'
          echo "✅ OpenSearch cluster healthy"

      - name: Update Deployment Status
        if: success()
        run: |
          # Update SSM parameter with deployment info
          aws ssm put-parameter \
            --name "/ecosystemcl/deployment/last_successful" \
            --value "${{ github.sha }}" \
            --type "String" \
            --overwrite

          aws ssm put-parameter \
            --name "/ecosystemcl/deployment/timestamp" \
            --value "$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
            --type "String" \
            --overwrite
